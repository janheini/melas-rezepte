---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { getEntry } from "astro:content";
import { request } from "@octokit/request";
import NewRecipe from "@/components/NewRecipe.vue";
import type { Recipe } from "@/pages/new.astro";
import {
    createValidFilename,
    trimRecipe,
    createContent,
    createNewRecipe,
} from "@/pages/new.astro";

async function getSha(path: string): Promise<string> {
    return (
        await request(`GET /repos/janheini/melas-rezepte/contents/${path}`, {
            owner: "janheini",
            repo: "melas-rezepte",
            path: path,
            headers: {
                "X-GitHub-Api-Version": "2022-11-28",
            },
        })
    ).data.sha as string;
}

export async function deleteRecipe(filename: string) {
    const path = `src/content/rezepte/${filename}`;
    return await request(
        `DELETE /repos/janheini/melas-rezepte/contents/${path}`,
        {
            owner: "janheini",
            repo: "melas-rezepte",
            path: path,
            message: `deleted ${path}`,
            sha: await getSha(path),
            headers: {
                "X-GitHub-Api-Version": "2022-11-28",
                accept: "application/vnd.github+json",
                authorization: `token ${import.meta.env.GITHUB_TOKEN}`,
            },
        },
    );
}

export async function changeRecipe(
    filename: string,
    title: string,
    content: string,
) {
    const path = `src/content/rezepte/${filename}`;
    return await request(`PUT /repos/janheini/melas-rezepte/contents/${path}`, {
        owner: "janheini",
        repo: "melas-rezepte",
        path: path,
        sha: await getSha(path),
        message: `changed recipe ${title}`,
        content: Buffer.from(content, "utf8").toString("base64"),
        headers: {
            "X-GitHub-Api-Version": "2022-11-28",
            accept: "application/vnd.github+json",
            authorization: `token ${import.meta.env.GITHUB_TOKEN}`,
        },
    });
}

const session = await Astro.locals.auth.validate();
if (!session) return Astro.redirect("/login", 302);

const slug = Astro.params.slug;

if (!slug) {
    return new Response(null, {
        status: 404,
        statusText: "Not found",
    });
}

const post = await getEntry("rezepte", slug);

if (!post) {
    return new Response(null, {
        status: 404,
        statusText: "Not found",
    });
}

if (Astro.request.method === "POST") {
    const recipe = trimRecipe(await Astro.request.json()) as Recipe;
    const filename = `${slug}.md`;
    const newFilename = createValidFilename(recipe.title);
    const path = `src/content/rezepte/${filename}`;
    const content = createContent(recipe);

    if (filename === newFilename) {
        const result = await changeRecipe(filename, recipe.title, content);
        console.log(`Result of changing recipe:\n${JSON.stringify(result)}`);
    } else {
        const deleteResult = await deleteRecipe(filename);
        console.log(
            `Result of deleting old recipe:\n${JSON.stringify(deleteResult)}`,
        );
        const createResult = await createNewRecipe(path, recipe.title, content);
        console.log(
            `Result of creating new recipe:\n${JSON.stringify(createResult)}`,
        );
    }

    // if (result.status == 200) {
    //     return Astro.redirect(".");
    // }

    return new Response();
}
---

<BaseLayout><NewRecipe recipe={post} client:load /></BaseLayout>
