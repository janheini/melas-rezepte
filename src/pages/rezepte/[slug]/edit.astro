---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { getEntry } from "astro:content";
import { tags } from "../../../content/config.ts";
import { request } from "@octokit/request";

const session = await Astro.locals.auth.validate();
if (!session) return Astro.redirect("/login", 302);

const slug = Astro.params.slug;

if (!slug) {
    return new Response(null, {
        status: 404,
        statusText: "Not found",
    });
}

const filename = `${slug}.md`;

async function getSha(): Promise<string> {
    const path = `src/content/rezepte/${filename}`;
    const result = await request(
        `GET /repos/janheini/melas-rezepte/contents/${path}`,
        {
            owner: "janheini",
            repo: "melas-rezepte",
            path: path,
            headers: {
                "X-GitHub-Api-Version": "2022-11-28",
            },
        },
    );
    return result.data.sha as string;
}

const post = await getEntry("rezepte", slug);

if (!post) {
    return new Response(null, {
        status: 404,
        statusText: "Not found",
    });
}

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    console.log(formData);

    let ingredients = formData.getAll("ingredients") as Array<string>;
    ingredients = ingredients
        .map((ingredient) => ingredient.trim())
        .filter((ingredient) => ingredient.length > 0);

    const title = formData.get("title")?.toString().trim() as string;
    console.log(title);

    console.log(filename);

    const path = `src/content/rezepte/${filename}`;
    console.log(path);

    const tags = formData.getAll("tags") as Array<string>;
    console.log(tags);

    const body = formData.get("body") as string;
    console.log(body);

    const frontmatter = {
        title: title,
        tags: tags,
        ingredients: ingredients,
    };
    console.log(frontmatter);

    const content = `
---
${JSON.stringify(frontmatter)}
---

${body}
`.trim();
    console.log(content);

    const result = await request(
        `PUT /repos/janheini/melas-rezepte/contents/${path}`,
        {
            owner: "janheini",
            repo: "melas-rezepte",
            path: path,
            sha: await getSha(),
            message: `changed recipe ${title}`,
            content: btoa(content),
            headers: {
                "X-GitHub-Api-Version": "2022-11-28",
                authorization: `token ${import.meta.env.GITHUB_TOKEN}`,
            },
        },
    );

    if (result.status == 200) {
        return Astro.redirect(".");
    }
    console.log(result);
    return new Response(JSON.stringify(result));
}
---

<BaseLayout>
    <form class="grid max-w-md gap-4" method="post">
        <input
            id="title"
            name="title"
            type="text"
            class="input input-bordered input-md"
            placeholder="Titel"
            value={post.data.title}
            autofocus
            required
        />
        <div class="flex flex-wrap gap-2">
            {
                tags.options.map((tag) => (
                    <div class="py-2">
                        <input
                            id={tag}
                            name="tags"
                            value={tag}
                            type="checkbox"
                            class="peer appearance-none"
                            checked={
                                post.data.tags &&
                                post.data.tags.indexOf(tag) > -1
                            }
                        />
                        <label
                            for={tag}
                            class="rounded-full border-2 p-2 peer-checked:bg-accent peer-checked:text-black"
                        >
                            {tag}
                        </label>
                    </div>
                ))
            }
        </div>
        {
            post.data.ingredients.map((ingredient) => (
                <input
                    id="ingredients"
                    name="ingredients"
                    type="text"
                    class="input input-bordered input-sm"
                    placeholder="Zutat"
                    value={ingredient}
                />
            ))
        }
        <input
            id="ingredients"
            name="ingredients"
            type="text"
            class="input input-bordered input-sm"
            placeholder="Zutat"
        />
        <textarea
            id="body"
            name="body"
            class="textarea textarea-bordered textarea-sm leading-4"
            placeholder="Anleitung"
            rows="10">{post.body}</textarea
        >
        <input type="submit" class="btn btn-outline btn-sm" value="Speichern" />
    </form>
</BaseLayout>

<script>
    const addNewField = (event: Event) => {
        const node = event.target as HTMLInputElement;
        if (node.value == "") return;
        let clone = node.cloneNode(true) as HTMLInputElement;
        clone.value = "";
        clone.addEventListener("keyup", addNewField);
        node.parentNode?.insertBefore(clone, node.nextSibling);
        node.removeEventListener("keyup", addNewField);
    };

    const zutaten = document.querySelectorAll("#ingredients");
    zutaten.forEach((zutat) => {
        const z = zutat as HTMLInputElement; // there has to be a better way
        if (!z.value) {
            zutat.addEventListener("keyup", addNewField);
        }
    });
</script>
