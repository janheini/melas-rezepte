---
import BaseLayout from "../layouts/BaseLayout.astro";
import { tags } from "../content/config.ts";
import { request } from "@octokit/request";

const session = await Astro.locals.auth.validate();
if (!session) return Astro.redirect("/login", 302);

function createValidFilename(str: string) {
    str =
        str
            .replace(/[\/\\:*?"<>|]/g, "_") // Replace invalid characters with underscores
            .replace(/\s+/g, "_") // Replace spaces with underscores
            .replace(/^\s+|\s+$/g, "") // Remove leading/trailing spaces
            .toLowerCase() + ".md"; // add markdown extension

    if (str.length > 255) {
        return str.slice(0, 255);
    }
    return str;
}

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    console.log(formData);

    let ingredients = formData.getAll("ingredients") as Array<string>;
    ingredients = ingredients
        .map((ingredient) => ingredient.trim())
        .filter((ingredient) => ingredient.length > 0);

    const title = formData.get("title")?.toString().trim() as string;
    console.log(title);

    const filename = createValidFilename(title);
    console.log(filename);

    const path = `src/content/rezepte/${filename}`;
    console.log(path);

    const tags = formData.getAll("tags") as Array<string>;
    console.log(tags);

    const body = formData.get("body") as string;
    console.log(body);

    const frontmatter = {
        title: title,
        tags: tags,
        ingredients: ingredients,
    };
    console.log(frontmatter);

    const content = `
---
${JSON.stringify(frontmatter)}
---

${body}
`.trim();
    console.log(content);

    const result = await request(
        `PUT /repos/janheini/melas-rezepte/contents/${path}`,
        {
            owner: "janheini",
            repo: "melas-rezepte",
            path: path,
            message: `added recipe ${title}`,
            content: Buffer.from(content, "utf8").toString("base64"),
            headers: {
                "X-GitHub-Api-Version": "2022-11-28",
                authorization: `token ${import.meta.env.GITHUB_TOKEN}`,
            },
        },
    );

    if (result.status == 201) {
        return Astro.redirect(".");
    }

    console.log(result);
    return new Response(JSON.stringify(result));
}
---

<BaseLayout>
    <h2 class="pb-2 font-black">Neues Rezept erstellen</h2>
    <form class="grid max-w-md gap-4" method="post">
        <input
            id="title"
            name="title"
            type="text"
            class="input input-bordered input-md"
            placeholder="Titel"
            autofocus
            required
        />
        <div class="flex flex-wrap gap-2">
            {
                tags.options.map((tag) => (
                    <div class="py-2">
                        <input
                            id={tag}
                            name="tags"
                            value={tag}
                            type="checkbox"
                            class="peer appearance-none"
                        />
                        <label
                            for={tag}
                            class="rounded-full border-2 p-2 peer-checked:bg-accent peer-checked:text-black"
                        >
                            {tag}
                        </label>
                    </div>
                ))
            }
        </div>
        <input
            id="ingredients"
            name="ingredients"
            type="text"
            class="input input-bordered input-sm"
            placeholder="Zutat"
        />
        <textarea
            id="body"
            name="body"
            class="textarea textarea-bordered textarea-sm leading-4"
            placeholder="Anleitung"
            rows="10"></textarea>
        <input type="submit" class="btn btn-outline btn-sm" value="Speichern" />
    </form>
</BaseLayout>

<script>
    const addNewField = (event: Event) => {
        const node = event.target as HTMLInputElement;
        if (node.value == "") return;
        let clone = node.cloneNode(true) as HTMLInputElement;
        clone.value = "";
        clone.addEventListener("keyup", addNewField);
        node.parentNode?.insertBefore(clone, node.nextSibling);
        node.removeEventListener("keyup", addNewField);
    };

    const zutaten = document.querySelectorAll("#ingredients");
    zutaten.forEach((zutat) => {
        zutat.addEventListener("keyup", addNewField);
    });
</script>
