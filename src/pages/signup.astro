---
import BaseLayout from "@layouts/BaseLayout.astro";

import { lucia, db } from "@lib/lucia";
import { generateId } from "lucia";
import { Argon2id } from "oslo/password";
import { LibsqlError } from "@libsql/client";

// only allow signup in dev
if (import.meta.env.PROD) {
    return new Response(null, {
        status: 404,
        statusText: "Not found",
    });
}

if (Astro.locals.user) {
    return Astro.redirect("/");
}

let errorMessage = "";

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const username = formData.get("username");
    const password = formData.get("password");

    try {
        if (
            typeof username !== "string" ||
            username.length < 3 ||
            username.length > 31 ||
            !/^[a-z0-9_-]+$/.test(username)
        ) {
            Astro.response.status = 400;
            throw "Invalid username";
        }
        if (
            typeof password !== "string" ||
            password.length < 6 ||
            password.length > 255
        ) {
            Astro.response.status = 400;
            throw "Invalid password";
        }

        const hashedPassword = await new Argon2id().hash(password);
        const userId = generateId(15);
        await db.batch(
            [
                {
                    sql: "INSERT INTO user (id, username) VALUES(?, ?)",
                    args: [userId, username],
                },
                {
                    sql: "INSERT INTO password (user_id, hashed_password) VALUES(?, ?)",
                    args: [userId, hashedPassword],
                },
            ],
            "write",
        );

        const session = await lucia.createSession(userId, {});
        const sessionCookie = lucia.createSessionCookie(session.id);
        Astro.cookies.set(
            sessionCookie.name,
            sessionCookie.value,
            sessionCookie.attributes,
        );

        return Astro.redirect("/");
    } catch (e) {
        console.log(e);
        if (e instanceof LibsqlError && e.code === "SQLITE_CONSTRAINT") {
            Astro.response.status = 400;
            errorMessage = "Username already used";
        } else if (typeof e === "string") {
            Astro.response.status = 400;
            errorMessage = e;
        } else {
            Astro.response.status = 500;
            errorMessage = "An unknown error occurred";
        }
    }
}
---

<BaseLayout>
    <h2 class="pb-2 font-black">Create new account</h2>
    <form class="grid max-w-xs gap-2" method="post">
        <input
            id="username"
            name="username"
            type="text"
            class="border p-1"
            placeholder="username"
        />
        <input
            id="password"
            name="password"
            type="password"
            class="border p-1"
            placeholder="password"
        />
        <input
            type="submit"
            class="cursor-pointer border p-1 hover:bg-gray-300 hover:text-black"
            value="Create account"
        />
        <a
            class="cursor-pointer border p-1 text-center hover:bg-gray-300 hover:text-black"
            href="/login"
        >
            Login instead</a
        >
    </form>
    {
        errorMessage && (
            <div class="py-4">
                <div class="alert alert-error max-w-xs">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6 shrink-0 stroke-current"
                        fill="none"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                    </svg>
                    <span>{errorMessage}</span>
                </div>
            </div>
        )
    }
</BaseLayout>
